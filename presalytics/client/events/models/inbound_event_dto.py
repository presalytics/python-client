# coding: utf-8

"""
    Presalytics Events API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InboundEventDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'event_type': 'str',
        'event_data': 'object',
        'source': 'str',
        'metadata': 'Metadata',
        'resource_id': 'str'
    }

    attribute_map = {
        'event_type': 'eventType',
        'event_data': 'eventData',
        'source': 'source',
        'metadata': 'metadata',
        'resource_id': 'resourceId'
    }

    def __init__(self, event_type=None, event_data=None, source=None, metadata=None, resource_id=None):  # noqa: E501
        """InboundEventDto - a model defined in OpenAPI"""  # noqa: E501

        self._event_type = None
        self._event_data = None
        self._source = None
        self._metadata = None
        self._resource_id = None
        self.discriminator = None

        self.event_type = event_type
        self.event_data = event_data
        self.source = source
        if metadata is not None:
            self.metadata = metadata
        if resource_id is not None:
            self.resource_id = resource_id

    @property
    def event_type(self):
        """Gets the event_type of this InboundEventDto.  # noqa: E501


        :return: The event_type of this InboundEventDto.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this InboundEventDto.


        :param event_type: The event_type of this InboundEventDto.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def event_data(self):
        """Gets the event_data of this InboundEventDto.  # noqa: E501


        :return: The event_data of this InboundEventDto.  # noqa: E501
        :rtype: object
        """
        return self._event_data

    @event_data.setter
    def event_data(self, event_data):
        """Sets the event_data of this InboundEventDto.


        :param event_data: The event_data of this InboundEventDto.  # noqa: E501
        :type: object
        """

        self._event_data = event_data

    @property
    def source(self):
        """Gets the source of this InboundEventDto.  # noqa: E501


        :return: The source of this InboundEventDto.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this InboundEventDto.


        :param source: The source of this InboundEventDto.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def metadata(self):
        """Gets the metadata of this InboundEventDto.  # noqa: E501


        :return: The metadata of this InboundEventDto.  # noqa: E501
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this InboundEventDto.


        :param metadata: The metadata of this InboundEventDto.  # noqa: E501
        :type: Metadata
        """

        self._metadata = metadata

    @property
    def resource_id(self):
        """Gets the resource_id of this InboundEventDto.  # noqa: E501


        :return: The resource_id of this InboundEventDto.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this InboundEventDto.


        :param resource_id: The resource_id of this InboundEventDto.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InboundEventDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
