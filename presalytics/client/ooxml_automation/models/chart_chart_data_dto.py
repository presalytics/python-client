# coding: utf-8

"""
    OOXML Automation

    This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.  # noqa: E501

    The version of the OpenAPI document: 0.1.0-no-tags
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ChartChartDataDTO(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'chart_id': 'str',
        'series_names': 'list[str]',
        'category_names': 'list[str]',
        'data_points': 'list[list[float]]'
    }

    attribute_map = {
        'chart_id': 'chartId',
        'series_names': 'seriesNames',
        'category_names': 'categoryNames',
        'data_points': 'dataPoints'
    }

    def __init__(self, chart_id=None, series_names=None, category_names=None, data_points=None):  # noqa: E501
        """ChartChartDataDTO - a model defined in OpenAPI"""  # noqa: E501

        self._chart_id = None
        self._series_names = None
        self._category_names = None
        self._data_points = None
        self.discriminator = None

        if chart_id is not None:
            self.chart_id = chart_id
        self.series_names = series_names
        self.category_names = category_names
        self.data_points = data_points

    @property
    def chart_id(self):
        """Gets the chart_id of this ChartChartDataDTO.  # noqa: E501


        :return: The chart_id of this ChartChartDataDTO.  # noqa: E501
        :rtype: str
        """
        return self._chart_id

    @chart_id.setter
    def chart_id(self, chart_id):
        """Sets the chart_id of this ChartChartDataDTO.


        :param chart_id: The chart_id of this ChartChartDataDTO.  # noqa: E501
        :type: str
        """

        self._chart_id = chart_id

    @property
    def series_names(self):
        """Gets the series_names of this ChartChartDataDTO.  # noqa: E501


        :return: The series_names of this ChartChartDataDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._series_names

    @series_names.setter
    def series_names(self, series_names):
        """Sets the series_names of this ChartChartDataDTO.


        :param series_names: The series_names of this ChartChartDataDTO.  # noqa: E501
        :type: list[str]
        """

        self._series_names = series_names

    @property
    def category_names(self):
        """Gets the category_names of this ChartChartDataDTO.  # noqa: E501


        :return: The category_names of this ChartChartDataDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._category_names

    @category_names.setter
    def category_names(self, category_names):
        """Sets the category_names of this ChartChartDataDTO.


        :param category_names: The category_names of this ChartChartDataDTO.  # noqa: E501
        :type: list[str]
        """

        self._category_names = category_names

    @property
    def data_points(self):
        """Gets the data_points of this ChartChartDataDTO.  # noqa: E501


        :return: The data_points of this ChartChartDataDTO.  # noqa: E501
        :rtype: list[list[float]]
        """
        return self._data_points

    @data_points.setter
    def data_points(self, data_points):
        """Sets the data_points of this ChartChartDataDTO.


        :param data_points: The data_points of this ChartChartDataDTO.  # noqa: E501
        :type: list[list[float]]
        """

        self._data_points = data_points

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChartChartDataDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
