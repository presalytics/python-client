# coding: utf-8

"""
    OOXML Automation

    This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.  # noqa: E501

    The version of the OpenAPI document: 0.1.0-no-tags
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SharedEffectsDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'effect_attributes': 'list[SharedEffectAttributesDetails]',
        'shape_id': 'str',
        'parent_shape': 'SlideShapesDetails',
        'connector_id': 'str',
        'parent_connector': 'SlideConnectorDetails',
        'effect_map_id': 'str',
        'effect_map': 'ThemeEffectMapDetails',
        'id': 'str',
        'date_created': 'datetime',
        'user_created': 'str',
        'date_modified': 'datetime',
        'user_modified': 'str'
    }

    attribute_map = {
        'name': 'name',
        'effect_attributes': 'effectAttributes',
        'shape_id': 'shapeId',
        'parent_shape': 'parentShape',
        'connector_id': 'connectorId',
        'parent_connector': 'parentConnector',
        'effect_map_id': 'effectMapId',
        'effect_map': 'effectMap',
        'id': 'id',
        'date_created': 'dateCreated',
        'user_created': 'userCreated',
        'date_modified': 'dateModified',
        'user_modified': 'userModified'
    }

    def __init__(self, name=None, effect_attributes=None, shape_id=None, parent_shape=None, connector_id=None, parent_connector=None, effect_map_id=None, effect_map=None, id=None, date_created=None, user_created=None, date_modified=None, user_modified=None):  # noqa: E501
        """SharedEffectsDetails - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._effect_attributes = None
        self._shape_id = None
        self._parent_shape = None
        self._connector_id = None
        self._parent_connector = None
        self._effect_map_id = None
        self._effect_map = None
        self._id = None
        self._date_created = None
        self._user_created = None
        self._date_modified = None
        self._user_modified = None
        self.discriminator = None

        self.name = name
        self.effect_attributes = effect_attributes
        self.shape_id = shape_id
        if parent_shape is not None:
            self.parent_shape = parent_shape
        self.connector_id = connector_id
        if parent_connector is not None:
            self.parent_connector = parent_connector
        self.effect_map_id = effect_map_id
        if effect_map is not None:
            self.effect_map = effect_map
        if id is not None:
            self.id = id
        if date_created is not None:
            self.date_created = date_created
        if user_created is not None:
            self.user_created = user_created
        if date_modified is not None:
            self.date_modified = date_modified
        if user_modified is not None:
            self.user_modified = user_modified

    @property
    def name(self):
        """Gets the name of this SharedEffectsDetails.  # noqa: E501


        :return: The name of this SharedEffectsDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SharedEffectsDetails.


        :param name: The name of this SharedEffectsDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def effect_attributes(self):
        """Gets the effect_attributes of this SharedEffectsDetails.  # noqa: E501


        :return: The effect_attributes of this SharedEffectsDetails.  # noqa: E501
        :rtype: list[SharedEffectAttributesDetails]
        """
        return self._effect_attributes

    @effect_attributes.setter
    def effect_attributes(self, effect_attributes):
        """Sets the effect_attributes of this SharedEffectsDetails.


        :param effect_attributes: The effect_attributes of this SharedEffectsDetails.  # noqa: E501
        :type: list[SharedEffectAttributesDetails]
        """

        self._effect_attributes = effect_attributes

    @property
    def shape_id(self):
        """Gets the shape_id of this SharedEffectsDetails.  # noqa: E501


        :return: The shape_id of this SharedEffectsDetails.  # noqa: E501
        :rtype: str
        """
        return self._shape_id

    @shape_id.setter
    def shape_id(self, shape_id):
        """Sets the shape_id of this SharedEffectsDetails.


        :param shape_id: The shape_id of this SharedEffectsDetails.  # noqa: E501
        :type: str
        """

        self._shape_id = shape_id

    @property
    def parent_shape(self):
        """Gets the parent_shape of this SharedEffectsDetails.  # noqa: E501


        :return: The parent_shape of this SharedEffectsDetails.  # noqa: E501
        :rtype: SlideShapesDetails
        """
        return self._parent_shape

    @parent_shape.setter
    def parent_shape(self, parent_shape):
        """Sets the parent_shape of this SharedEffectsDetails.


        :param parent_shape: The parent_shape of this SharedEffectsDetails.  # noqa: E501
        :type: SlideShapesDetails
        """

        self._parent_shape = parent_shape

    @property
    def connector_id(self):
        """Gets the connector_id of this SharedEffectsDetails.  # noqa: E501


        :return: The connector_id of this SharedEffectsDetails.  # noqa: E501
        :rtype: str
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """Sets the connector_id of this SharedEffectsDetails.


        :param connector_id: The connector_id of this SharedEffectsDetails.  # noqa: E501
        :type: str
        """

        self._connector_id = connector_id

    @property
    def parent_connector(self):
        """Gets the parent_connector of this SharedEffectsDetails.  # noqa: E501


        :return: The parent_connector of this SharedEffectsDetails.  # noqa: E501
        :rtype: SlideConnectorDetails
        """
        return self._parent_connector

    @parent_connector.setter
    def parent_connector(self, parent_connector):
        """Sets the parent_connector of this SharedEffectsDetails.


        :param parent_connector: The parent_connector of this SharedEffectsDetails.  # noqa: E501
        :type: SlideConnectorDetails
        """

        self._parent_connector = parent_connector

    @property
    def effect_map_id(self):
        """Gets the effect_map_id of this SharedEffectsDetails.  # noqa: E501


        :return: The effect_map_id of this SharedEffectsDetails.  # noqa: E501
        :rtype: str
        """
        return self._effect_map_id

    @effect_map_id.setter
    def effect_map_id(self, effect_map_id):
        """Sets the effect_map_id of this SharedEffectsDetails.


        :param effect_map_id: The effect_map_id of this SharedEffectsDetails.  # noqa: E501
        :type: str
        """

        self._effect_map_id = effect_map_id

    @property
    def effect_map(self):
        """Gets the effect_map of this SharedEffectsDetails.  # noqa: E501


        :return: The effect_map of this SharedEffectsDetails.  # noqa: E501
        :rtype: ThemeEffectMapDetails
        """
        return self._effect_map

    @effect_map.setter
    def effect_map(self, effect_map):
        """Sets the effect_map of this SharedEffectsDetails.


        :param effect_map: The effect_map of this SharedEffectsDetails.  # noqa: E501
        :type: ThemeEffectMapDetails
        """

        self._effect_map = effect_map

    @property
    def id(self):
        """Gets the id of this SharedEffectsDetails.  # noqa: E501


        :return: The id of this SharedEffectsDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SharedEffectsDetails.


        :param id: The id of this SharedEffectsDetails.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def date_created(self):
        """Gets the date_created of this SharedEffectsDetails.  # noqa: E501


        :return: The date_created of this SharedEffectsDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this SharedEffectsDetails.


        :param date_created: The date_created of this SharedEffectsDetails.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def user_created(self):
        """Gets the user_created of this SharedEffectsDetails.  # noqa: E501


        :return: The user_created of this SharedEffectsDetails.  # noqa: E501
        :rtype: str
        """
        return self._user_created

    @user_created.setter
    def user_created(self, user_created):
        """Sets the user_created of this SharedEffectsDetails.


        :param user_created: The user_created of this SharedEffectsDetails.  # noqa: E501
        :type: str
        """

        self._user_created = user_created

    @property
    def date_modified(self):
        """Gets the date_modified of this SharedEffectsDetails.  # noqa: E501


        :return: The date_modified of this SharedEffectsDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this SharedEffectsDetails.


        :param date_modified: The date_modified of this SharedEffectsDetails.  # noqa: E501
        :type: datetime
        """

        self._date_modified = date_modified

    @property
    def user_modified(self):
        """Gets the user_modified of this SharedEffectsDetails.  # noqa: E501


        :return: The user_modified of this SharedEffectsDetails.  # noqa: E501
        :rtype: str
        """
        return self._user_modified

    @user_modified.setter
    def user_modified(self, user_modified):
        """Sets the user_modified of this SharedEffectsDetails.


        :param user_modified: The user_modified of this SharedEffectsDetails.  # noqa: E501
        :type: str
        """

        self._user_modified = user_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedEffectsDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
