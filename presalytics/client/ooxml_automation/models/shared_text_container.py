# coding: utf-8

"""
    OOXML Automation

    This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.  # noqa: E501

    The version of the OpenAPI document: 0.1.0-no-tags
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SharedTextContainer(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'shape_id': 'str',
        'outer_xml': 'str',
        'axis_id': 'str',
        'chart_id': 'str',
        'table_cell_id': 'str',
        'id': 'str'
    }

    attribute_map = {
        'shape_id': 'shapeId',
        'outer_xml': 'outerXml',
        'axis_id': 'axisId',
        'chart_id': 'chartId',
        'table_cell_id': 'tableCellId',
        'id': 'id'
    }

    def __init__(self, shape_id=None, outer_xml=None, axis_id=None, chart_id=None, table_cell_id=None, id=None):  # noqa: E501
        """SharedTextContainer - a model defined in OpenAPI"""  # noqa: E501

        self._shape_id = None
        self._outer_xml = None
        self._axis_id = None
        self._chart_id = None
        self._table_cell_id = None
        self._id = None
        self.discriminator = None

        self.shape_id = shape_id
        self.outer_xml = outer_xml
        self.axis_id = axis_id
        self.chart_id = chart_id
        self.table_cell_id = table_cell_id
        if id is not None:
            self.id = id

    @property
    def shape_id(self):
        """Gets the shape_id of this SharedTextContainer.  # noqa: E501


        :return: The shape_id of this SharedTextContainer.  # noqa: E501
        :rtype: str
        """
        return self._shape_id

    @shape_id.setter
    def shape_id(self, shape_id):
        """Sets the shape_id of this SharedTextContainer.


        :param shape_id: The shape_id of this SharedTextContainer.  # noqa: E501
        :type: str
        """

        self._shape_id = shape_id

    @property
    def outer_xml(self):
        """Gets the outer_xml of this SharedTextContainer.  # noqa: E501


        :return: The outer_xml of this SharedTextContainer.  # noqa: E501
        :rtype: str
        """
        return self._outer_xml

    @outer_xml.setter
    def outer_xml(self, outer_xml):
        """Sets the outer_xml of this SharedTextContainer.


        :param outer_xml: The outer_xml of this SharedTextContainer.  # noqa: E501
        :type: str
        """

        self._outer_xml = outer_xml

    @property
    def axis_id(self):
        """Gets the axis_id of this SharedTextContainer.  # noqa: E501


        :return: The axis_id of this SharedTextContainer.  # noqa: E501
        :rtype: str
        """
        return self._axis_id

    @axis_id.setter
    def axis_id(self, axis_id):
        """Sets the axis_id of this SharedTextContainer.


        :param axis_id: The axis_id of this SharedTextContainer.  # noqa: E501
        :type: str
        """

        self._axis_id = axis_id

    @property
    def chart_id(self):
        """Gets the chart_id of this SharedTextContainer.  # noqa: E501


        :return: The chart_id of this SharedTextContainer.  # noqa: E501
        :rtype: str
        """
        return self._chart_id

    @chart_id.setter
    def chart_id(self, chart_id):
        """Sets the chart_id of this SharedTextContainer.


        :param chart_id: The chart_id of this SharedTextContainer.  # noqa: E501
        :type: str
        """

        self._chart_id = chart_id

    @property
    def table_cell_id(self):
        """Gets the table_cell_id of this SharedTextContainer.  # noqa: E501


        :return: The table_cell_id of this SharedTextContainer.  # noqa: E501
        :rtype: str
        """
        return self._table_cell_id

    @table_cell_id.setter
    def table_cell_id(self, table_cell_id):
        """Sets the table_cell_id of this SharedTextContainer.


        :param table_cell_id: The table_cell_id of this SharedTextContainer.  # noqa: E501
        :type: str
        """

        self._table_cell_id = table_cell_id

    @property
    def id(self):
        """Gets the id of this SharedTextContainer.  # noqa: E501


        :return: The id of this SharedTextContainer.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SharedTextContainer.


        :param id: The id of this SharedTextContainer.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedTextContainer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
