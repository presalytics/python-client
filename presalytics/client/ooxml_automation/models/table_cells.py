# coding: utf-8

"""
    OOXML Automation

    This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.  # noqa: E501

    The version of the OpenAPI document: 0.1.0-no-tags
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TableCells(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'row_id': 'str',
        'column_id': 'str',
        'row_span': 'int',
        'column_span': 'int',
        'is_merged_vertical': 'bool',
        'is_merged_horozontal': 'bool',
        'id': 'str'
    }

    attribute_map = {
        'row_id': 'rowId',
        'column_id': 'columnId',
        'row_span': 'rowSpan',
        'column_span': 'columnSpan',
        'is_merged_vertical': 'isMergedVertical',
        'is_merged_horozontal': 'isMergedHorozontal',
        'id': 'id'
    }

    def __init__(self, row_id=None, column_id=None, row_span=None, column_span=None, is_merged_vertical=None, is_merged_horozontal=None, id=None):  # noqa: E501
        """TableCells - a model defined in OpenAPI"""  # noqa: E501

        self._row_id = None
        self._column_id = None
        self._row_span = None
        self._column_span = None
        self._is_merged_vertical = None
        self._is_merged_horozontal = None
        self._id = None
        self.discriminator = None

        self.row_id = row_id
        self.column_id = column_id
        if row_span is not None:
            self.row_span = row_span
        if column_span is not None:
            self.column_span = column_span
        if is_merged_vertical is not None:
            self.is_merged_vertical = is_merged_vertical
        if is_merged_horozontal is not None:
            self.is_merged_horozontal = is_merged_horozontal
        if id is not None:
            self.id = id

    @property
    def row_id(self):
        """Gets the row_id of this TableCells.  # noqa: E501


        :return: The row_id of this TableCells.  # noqa: E501
        :rtype: str
        """
        return self._row_id

    @row_id.setter
    def row_id(self, row_id):
        """Sets the row_id of this TableCells.


        :param row_id: The row_id of this TableCells.  # noqa: E501
        :type: str
        """

        self._row_id = row_id

    @property
    def column_id(self):
        """Gets the column_id of this TableCells.  # noqa: E501


        :return: The column_id of this TableCells.  # noqa: E501
        :rtype: str
        """
        return self._column_id

    @column_id.setter
    def column_id(self, column_id):
        """Sets the column_id of this TableCells.


        :param column_id: The column_id of this TableCells.  # noqa: E501
        :type: str
        """

        self._column_id = column_id

    @property
    def row_span(self):
        """Gets the row_span of this TableCells.  # noqa: E501


        :return: The row_span of this TableCells.  # noqa: E501
        :rtype: int
        """
        return self._row_span

    @row_span.setter
    def row_span(self, row_span):
        """Sets the row_span of this TableCells.


        :param row_span: The row_span of this TableCells.  # noqa: E501
        :type: int
        """

        self._row_span = row_span

    @property
    def column_span(self):
        """Gets the column_span of this TableCells.  # noqa: E501


        :return: The column_span of this TableCells.  # noqa: E501
        :rtype: int
        """
        return self._column_span

    @column_span.setter
    def column_span(self, column_span):
        """Sets the column_span of this TableCells.


        :param column_span: The column_span of this TableCells.  # noqa: E501
        :type: int
        """

        self._column_span = column_span

    @property
    def is_merged_vertical(self):
        """Gets the is_merged_vertical of this TableCells.  # noqa: E501


        :return: The is_merged_vertical of this TableCells.  # noqa: E501
        :rtype: bool
        """
        return self._is_merged_vertical

    @is_merged_vertical.setter
    def is_merged_vertical(self, is_merged_vertical):
        """Sets the is_merged_vertical of this TableCells.


        :param is_merged_vertical: The is_merged_vertical of this TableCells.  # noqa: E501
        :type: bool
        """

        self._is_merged_vertical = is_merged_vertical

    @property
    def is_merged_horozontal(self):
        """Gets the is_merged_horozontal of this TableCells.  # noqa: E501


        :return: The is_merged_horozontal of this TableCells.  # noqa: E501
        :rtype: bool
        """
        return self._is_merged_horozontal

    @is_merged_horozontal.setter
    def is_merged_horozontal(self, is_merged_horozontal):
        """Sets the is_merged_horozontal of this TableCells.


        :param is_merged_horozontal: The is_merged_horozontal of this TableCells.  # noqa: E501
        :type: bool
        """

        self._is_merged_horozontal = is_merged_horozontal

    @property
    def id(self):
        """Gets the id of this TableCells.  # noqa: E501


        :return: The id of this TableCells.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TableCells.


        :param id: The id of this TableCells.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableCells):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
