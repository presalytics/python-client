# coding: utf-8

"""
    OOXML Automation

    This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.  # noqa: E501

    The version of the OpenAPI document: 0.1.0-no-tags
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from presalytics.client.presalytics_ooxml_automation.configuration import Configuration


class ChartPlotType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type_id': 'int',
        'plot_type_name': 'str',
        'plot_qualifed_assy': 'str',
        'row_col_type_id': 'int',
        'id': 'str'
    }

    attribute_map = {
        'type_id': 'typeId',
        'plot_type_name': 'plotTypeName',
        'plot_qualifed_assy': 'plotQualifedAssy',
        'row_col_type_id': 'rowColTypeId',
        'id': 'id'
    }

    def __init__(self, type_id=None, plot_type_name=None, plot_qualifed_assy=None, row_col_type_id=None, id=None, local_vars_configuration=None):  # noqa: E501
        """ChartPlotType - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type_id = None
        self._plot_type_name = None
        self._plot_qualifed_assy = None
        self._row_col_type_id = None
        self._id = None
        self.discriminator = None

        if type_id is not None:
            self.type_id = type_id
        self.plot_type_name = plot_type_name
        self.plot_qualifed_assy = plot_qualifed_assy
        if row_col_type_id is not None:
            self.row_col_type_id = row_col_type_id
        if id is not None:
            self.id = id

    @property
    def type_id(self):
        """Gets the type_id of this ChartPlotType.  # noqa: E501


        :return: The type_id of this ChartPlotType.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this ChartPlotType.


        :param type_id: The type_id of this ChartPlotType.  # noqa: E501
        :type: int
        """

        self._type_id = type_id

    @property
    def plot_type_name(self):
        """Gets the plot_type_name of this ChartPlotType.  # noqa: E501


        :return: The plot_type_name of this ChartPlotType.  # noqa: E501
        :rtype: str
        """
        return self._plot_type_name

    @plot_type_name.setter
    def plot_type_name(self, plot_type_name):
        """Sets the plot_type_name of this ChartPlotType.


        :param plot_type_name: The plot_type_name of this ChartPlotType.  # noqa: E501
        :type: str
        """

        self._plot_type_name = plot_type_name

    @property
    def plot_qualifed_assy(self):
        """Gets the plot_qualifed_assy of this ChartPlotType.  # noqa: E501


        :return: The plot_qualifed_assy of this ChartPlotType.  # noqa: E501
        :rtype: str
        """
        return self._plot_qualifed_assy

    @plot_qualifed_assy.setter
    def plot_qualifed_assy(self, plot_qualifed_assy):
        """Sets the plot_qualifed_assy of this ChartPlotType.


        :param plot_qualifed_assy: The plot_qualifed_assy of this ChartPlotType.  # noqa: E501
        :type: str
        """

        self._plot_qualifed_assy = plot_qualifed_assy

    @property
    def row_col_type_id(self):
        """Gets the row_col_type_id of this ChartPlotType.  # noqa: E501


        :return: The row_col_type_id of this ChartPlotType.  # noqa: E501
        :rtype: int
        """
        return self._row_col_type_id

    @row_col_type_id.setter
    def row_col_type_id(self, row_col_type_id):
        """Sets the row_col_type_id of this ChartPlotType.


        :param row_col_type_id: The row_col_type_id of this ChartPlotType.  # noqa: E501
        :type: int
        """

        self._row_col_type_id = row_col_type_id

    @property
    def id(self):
        """Gets the id of this ChartPlotType.  # noqa: E501


        :return: The id of this ChartPlotType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ChartPlotType.


        :param id: The id of this ChartPlotType.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChartPlotType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChartPlotType):
            return True

        return self.to_dict() != other.to_dict()
