# coding: utf-8

"""
    OOXML Automation

    This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.  # noqa: E501

    The version of the OpenAPI document: 0.1.0-no-tags
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from presalytics.client.presalytics_ooxml_automation.configuration import Configuration


class SharedEffects(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'shape_id': 'str',
        'connector_id': 'str',
        'effect_map_id': 'str',
        'id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'shape_id': 'shapeId',
        'connector_id': 'connectorId',
        'effect_map_id': 'effectMapId',
        'id': 'id'
    }

    def __init__(self, name=None, shape_id=None, connector_id=None, effect_map_id=None, id=None, local_vars_configuration=None):  # noqa: E501
        """SharedEffects - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._shape_id = None
        self._connector_id = None
        self._effect_map_id = None
        self._id = None
        self.discriminator = None

        self.name = name
        self.shape_id = shape_id
        self.connector_id = connector_id
        self.effect_map_id = effect_map_id
        if id is not None:
            self.id = id

    @property
    def name(self):
        """Gets the name of this SharedEffects.  # noqa: E501


        :return: The name of this SharedEffects.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SharedEffects.


        :param name: The name of this SharedEffects.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def shape_id(self):
        """Gets the shape_id of this SharedEffects.  # noqa: E501


        :return: The shape_id of this SharedEffects.  # noqa: E501
        :rtype: str
        """
        return self._shape_id

    @shape_id.setter
    def shape_id(self, shape_id):
        """Sets the shape_id of this SharedEffects.


        :param shape_id: The shape_id of this SharedEffects.  # noqa: E501
        :type: str
        """

        self._shape_id = shape_id

    @property
    def connector_id(self):
        """Gets the connector_id of this SharedEffects.  # noqa: E501


        :return: The connector_id of this SharedEffects.  # noqa: E501
        :rtype: str
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """Sets the connector_id of this SharedEffects.


        :param connector_id: The connector_id of this SharedEffects.  # noqa: E501
        :type: str
        """

        self._connector_id = connector_id

    @property
    def effect_map_id(self):
        """Gets the effect_map_id of this SharedEffects.  # noqa: E501


        :return: The effect_map_id of this SharedEffects.  # noqa: E501
        :rtype: str
        """
        return self._effect_map_id

    @effect_map_id.setter
    def effect_map_id(self, effect_map_id):
        """Sets the effect_map_id of this SharedEffects.


        :param effect_map_id: The effect_map_id of this SharedEffects.  # noqa: E501
        :type: str
        """

        self._effect_map_id = effect_map_id

    @property
    def id(self):
        """Gets the id of this SharedEffects.  # noqa: E501


        :return: The id of this SharedEffects.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SharedEffects.


        :param id: The id of this SharedEffects.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedEffects):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedEffects):
            return True

        return self.to_dict() != other.to_dict()
