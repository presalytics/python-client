# coding: utf-8

"""
    OOXML Automation

    This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.  # noqa: E501

    The version of the OpenAPI document: 0.1.0-no-tags
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from presalytics.client.presalytics_ooxml_automation.configuration import Configuration


class SharedImageFills(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'fill_map_id': 'str',
        'compression_state': 'str',
        'stretch': 'bool',
        'tile': 'str',
        'rotate_with_shape': 'bool',
        'source_rectangle': 'str',
        'dpi': 'int',
        'effects_json': 'str',
        'id': 'str'
    }

    attribute_map = {
        'fill_map_id': 'fillMapId',
        'compression_state': 'compressionState',
        'stretch': 'stretch',
        'tile': 'tile',
        'rotate_with_shape': 'rotateWithShape',
        'source_rectangle': 'sourceRectangle',
        'dpi': 'dpi',
        'effects_json': 'effectsJson',
        'id': 'id'
    }

    def __init__(self, fill_map_id=None, compression_state=None, stretch=None, tile=None, rotate_with_shape=None, source_rectangle=None, dpi=None, effects_json=None, id=None, local_vars_configuration=None):  # noqa: E501
        """SharedImageFills - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._fill_map_id = None
        self._compression_state = None
        self._stretch = None
        self._tile = None
        self._rotate_with_shape = None
        self._source_rectangle = None
        self._dpi = None
        self._effects_json = None
        self._id = None
        self.discriminator = None

        self.fill_map_id = fill_map_id
        self.compression_state = compression_state
        if stretch is not None:
            self.stretch = stretch
        self.tile = tile
        if rotate_with_shape is not None:
            self.rotate_with_shape = rotate_with_shape
        self.source_rectangle = source_rectangle
        self.dpi = dpi
        self.effects_json = effects_json
        if id is not None:
            self.id = id

    @property
    def fill_map_id(self):
        """Gets the fill_map_id of this SharedImageFills.  # noqa: E501


        :return: The fill_map_id of this SharedImageFills.  # noqa: E501
        :rtype: str
        """
        return self._fill_map_id

    @fill_map_id.setter
    def fill_map_id(self, fill_map_id):
        """Sets the fill_map_id of this SharedImageFills.


        :param fill_map_id: The fill_map_id of this SharedImageFills.  # noqa: E501
        :type: str
        """

        self._fill_map_id = fill_map_id

    @property
    def compression_state(self):
        """Gets the compression_state of this SharedImageFills.  # noqa: E501


        :return: The compression_state of this SharedImageFills.  # noqa: E501
        :rtype: str
        """
        return self._compression_state

    @compression_state.setter
    def compression_state(self, compression_state):
        """Sets the compression_state of this SharedImageFills.


        :param compression_state: The compression_state of this SharedImageFills.  # noqa: E501
        :type: str
        """

        self._compression_state = compression_state

    @property
    def stretch(self):
        """Gets the stretch of this SharedImageFills.  # noqa: E501


        :return: The stretch of this SharedImageFills.  # noqa: E501
        :rtype: bool
        """
        return self._stretch

    @stretch.setter
    def stretch(self, stretch):
        """Sets the stretch of this SharedImageFills.


        :param stretch: The stretch of this SharedImageFills.  # noqa: E501
        :type: bool
        """

        self._stretch = stretch

    @property
    def tile(self):
        """Gets the tile of this SharedImageFills.  # noqa: E501


        :return: The tile of this SharedImageFills.  # noqa: E501
        :rtype: str
        """
        return self._tile

    @tile.setter
    def tile(self, tile):
        """Sets the tile of this SharedImageFills.


        :param tile: The tile of this SharedImageFills.  # noqa: E501
        :type: str
        """

        self._tile = tile

    @property
    def rotate_with_shape(self):
        """Gets the rotate_with_shape of this SharedImageFills.  # noqa: E501


        :return: The rotate_with_shape of this SharedImageFills.  # noqa: E501
        :rtype: bool
        """
        return self._rotate_with_shape

    @rotate_with_shape.setter
    def rotate_with_shape(self, rotate_with_shape):
        """Sets the rotate_with_shape of this SharedImageFills.


        :param rotate_with_shape: The rotate_with_shape of this SharedImageFills.  # noqa: E501
        :type: bool
        """

        self._rotate_with_shape = rotate_with_shape

    @property
    def source_rectangle(self):
        """Gets the source_rectangle of this SharedImageFills.  # noqa: E501


        :return: The source_rectangle of this SharedImageFills.  # noqa: E501
        :rtype: str
        """
        return self._source_rectangle

    @source_rectangle.setter
    def source_rectangle(self, source_rectangle):
        """Sets the source_rectangle of this SharedImageFills.


        :param source_rectangle: The source_rectangle of this SharedImageFills.  # noqa: E501
        :type: str
        """

        self._source_rectangle = source_rectangle

    @property
    def dpi(self):
        """Gets the dpi of this SharedImageFills.  # noqa: E501


        :return: The dpi of this SharedImageFills.  # noqa: E501
        :rtype: int
        """
        return self._dpi

    @dpi.setter
    def dpi(self, dpi):
        """Sets the dpi of this SharedImageFills.


        :param dpi: The dpi of this SharedImageFills.  # noqa: E501
        :type: int
        """

        self._dpi = dpi

    @property
    def effects_json(self):
        """Gets the effects_json of this SharedImageFills.  # noqa: E501


        :return: The effects_json of this SharedImageFills.  # noqa: E501
        :rtype: str
        """
        return self._effects_json

    @effects_json.setter
    def effects_json(self, effects_json):
        """Sets the effects_json of this SharedImageFills.


        :param effects_json: The effects_json of this SharedImageFills.  # noqa: E501
        :type: str
        """

        self._effects_json = effects_json

    @property
    def id(self):
        """Gets the id of this SharedImageFills.  # noqa: E501


        :return: The id of this SharedImageFills.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SharedImageFills.


        :param id: The id of this SharedImageFills.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedImageFills):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedImageFills):
            return True

        return self.to_dict() != other.to_dict()
