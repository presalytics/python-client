# coding: utf-8

"""
    OOXML Automation

    This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.  # noqa: E501

    The version of the OpenAPI document: 0.1.0-no-tags
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from presalytics_ooxml_automation.configuration import Configuration


class SharedPictures(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'graphics_id': 'str',
        'image_fills_id': 'str',
        'image_file_blob_url': 'str',
        'file_extension': 'str',
        'id': 'str'
    }

    attribute_map = {
        'graphics_id': 'graphicsId',
        'image_fills_id': 'imageFillsId',
        'image_file_blob_url': 'imageFileBlobUrl',
        'file_extension': 'fileExtension',
        'id': 'id'
    }

    def __init__(self, graphics_id=None, image_fills_id=None, image_file_blob_url=None, file_extension=None, id=None, local_vars_configuration=None):  # noqa: E501
        """SharedPictures - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._graphics_id = None
        self._image_fills_id = None
        self._image_file_blob_url = None
        self._file_extension = None
        self._id = None
        self.discriminator = None

        self.graphics_id = graphics_id
        self.image_fills_id = image_fills_id
        self.image_file_blob_url = image_file_blob_url
        self.file_extension = file_extension
        if id is not None:
            self.id = id

    @property
    def graphics_id(self):
        """Gets the graphics_id of this SharedPictures.  # noqa: E501


        :return: The graphics_id of this SharedPictures.  # noqa: E501
        :rtype: str
        """
        return self._graphics_id

    @graphics_id.setter
    def graphics_id(self, graphics_id):
        """Sets the graphics_id of this SharedPictures.


        :param graphics_id: The graphics_id of this SharedPictures.  # noqa: E501
        :type: str
        """

        self._graphics_id = graphics_id

    @property
    def image_fills_id(self):
        """Gets the image_fills_id of this SharedPictures.  # noqa: E501


        :return: The image_fills_id of this SharedPictures.  # noqa: E501
        :rtype: str
        """
        return self._image_fills_id

    @image_fills_id.setter
    def image_fills_id(self, image_fills_id):
        """Sets the image_fills_id of this SharedPictures.


        :param image_fills_id: The image_fills_id of this SharedPictures.  # noqa: E501
        :type: str
        """

        self._image_fills_id = image_fills_id

    @property
    def image_file_blob_url(self):
        """Gets the image_file_blob_url of this SharedPictures.  # noqa: E501


        :return: The image_file_blob_url of this SharedPictures.  # noqa: E501
        :rtype: str
        """
        return self._image_file_blob_url

    @image_file_blob_url.setter
    def image_file_blob_url(self, image_file_blob_url):
        """Sets the image_file_blob_url of this SharedPictures.


        :param image_file_blob_url: The image_file_blob_url of this SharedPictures.  # noqa: E501
        :type: str
        """

        self._image_file_blob_url = image_file_blob_url

    @property
    def file_extension(self):
        """Gets the file_extension of this SharedPictures.  # noqa: E501


        :return: The file_extension of this SharedPictures.  # noqa: E501
        :rtype: str
        """
        return self._file_extension

    @file_extension.setter
    def file_extension(self, file_extension):
        """Sets the file_extension of this SharedPictures.


        :param file_extension: The file_extension of this SharedPictures.  # noqa: E501
        :type: str
        """

        self._file_extension = file_extension

    @property
    def id(self):
        """Gets the id of this SharedPictures.  # noqa: E501


        :return: The id of this SharedPictures.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SharedPictures.


        :param id: The id of this SharedPictures.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedPictures):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedPictures):
            return True

        return self.to_dict() != other.to_dict()
