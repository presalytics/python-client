# coding: utf-8

"""
    OOXML Automation

    This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.  # noqa: E501

    The version of the OpenAPI document: 0.1.0-no-tags
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from presalytics.client.presalytics_ooxml_automation.configuration import Configuration


class TableBordersDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cell_id': 'str',
        'cell': 'object',
        'top': 'object',
        'bottom': 'object',
        'right': 'object',
        'left': 'object',
        't_lto_br': 'object',
        'b_lto_tr': 'object',
        'id': 'str',
        'date_created': 'datetime',
        'user_created': 'str',
        'date_modified': 'datetime',
        'user_modified': 'str'
    }

    attribute_map = {
        'cell_id': 'cellId',
        'cell': 'cell',
        'top': 'top',
        'bottom': 'bottom',
        'right': 'right',
        'left': 'left',
        't_lto_br': 'tLtoBR',
        'b_lto_tr': 'bLtoTR',
        'id': 'id',
        'date_created': 'dateCreated',
        'user_created': 'userCreated',
        'date_modified': 'dateModified',
        'user_modified': 'userModified'
    }

    def __init__(self, cell_id=None, cell=None, top=None, bottom=None, right=None, left=None, t_lto_br=None, b_lto_tr=None, id=None, date_created=None, user_created=None, date_modified=None, user_modified=None, local_vars_configuration=None):  # noqa: E501
        """TableBordersDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cell_id = None
        self._cell = None
        self._top = None
        self._bottom = None
        self._right = None
        self._left = None
        self._t_lto_br = None
        self._b_lto_tr = None
        self._id = None
        self._date_created = None
        self._user_created = None
        self._date_modified = None
        self._user_modified = None
        self.discriminator = None

        self.cell_id = cell_id
        if cell is not None:
            self.cell = cell
        if top is not None:
            self.top = top
        if bottom is not None:
            self.bottom = bottom
        if right is not None:
            self.right = right
        if left is not None:
            self.left = left
        if t_lto_br is not None:
            self.t_lto_br = t_lto_br
        if b_lto_tr is not None:
            self.b_lto_tr = b_lto_tr
        if id is not None:
            self.id = id
        if date_created is not None:
            self.date_created = date_created
        if user_created is not None:
            self.user_created = user_created
        if date_modified is not None:
            self.date_modified = date_modified
        if user_modified is not None:
            self.user_modified = user_modified

    @property
    def cell_id(self):
        """Gets the cell_id of this TableBordersDetails.  # noqa: E501


        :return: The cell_id of this TableBordersDetails.  # noqa: E501
        :rtype: str
        """
        return self._cell_id

    @cell_id.setter
    def cell_id(self, cell_id):
        """Sets the cell_id of this TableBordersDetails.


        :param cell_id: The cell_id of this TableBordersDetails.  # noqa: E501
        :type: str
        """

        self._cell_id = cell_id

    @property
    def cell(self):
        """Gets the cell of this TableBordersDetails.  # noqa: E501


        :return: The cell of this TableBordersDetails.  # noqa: E501
        :rtype: object
        """
        return self._cell

    @cell.setter
    def cell(self, cell):
        """Sets the cell of this TableBordersDetails.


        :param cell: The cell of this TableBordersDetails.  # noqa: E501
        :type: object
        """

        self._cell = cell

    @property
    def top(self):
        """Gets the top of this TableBordersDetails.  # noqa: E501


        :return: The top of this TableBordersDetails.  # noqa: E501
        :rtype: object
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this TableBordersDetails.


        :param top: The top of this TableBordersDetails.  # noqa: E501
        :type: object
        """

        self._top = top

    @property
    def bottom(self):
        """Gets the bottom of this TableBordersDetails.  # noqa: E501


        :return: The bottom of this TableBordersDetails.  # noqa: E501
        :rtype: object
        """
        return self._bottom

    @bottom.setter
    def bottom(self, bottom):
        """Sets the bottom of this TableBordersDetails.


        :param bottom: The bottom of this TableBordersDetails.  # noqa: E501
        :type: object
        """

        self._bottom = bottom

    @property
    def right(self):
        """Gets the right of this TableBordersDetails.  # noqa: E501


        :return: The right of this TableBordersDetails.  # noqa: E501
        :rtype: object
        """
        return self._right

    @right.setter
    def right(self, right):
        """Sets the right of this TableBordersDetails.


        :param right: The right of this TableBordersDetails.  # noqa: E501
        :type: object
        """

        self._right = right

    @property
    def left(self):
        """Gets the left of this TableBordersDetails.  # noqa: E501


        :return: The left of this TableBordersDetails.  # noqa: E501
        :rtype: object
        """
        return self._left

    @left.setter
    def left(self, left):
        """Sets the left of this TableBordersDetails.


        :param left: The left of this TableBordersDetails.  # noqa: E501
        :type: object
        """

        self._left = left

    @property
    def t_lto_br(self):
        """Gets the t_lto_br of this TableBordersDetails.  # noqa: E501


        :return: The t_lto_br of this TableBordersDetails.  # noqa: E501
        :rtype: object
        """
        return self._t_lto_br

    @t_lto_br.setter
    def t_lto_br(self, t_lto_br):
        """Sets the t_lto_br of this TableBordersDetails.


        :param t_lto_br: The t_lto_br of this TableBordersDetails.  # noqa: E501
        :type: object
        """

        self._t_lto_br = t_lto_br

    @property
    def b_lto_tr(self):
        """Gets the b_lto_tr of this TableBordersDetails.  # noqa: E501


        :return: The b_lto_tr of this TableBordersDetails.  # noqa: E501
        :rtype: object
        """
        return self._b_lto_tr

    @b_lto_tr.setter
    def b_lto_tr(self, b_lto_tr):
        """Sets the b_lto_tr of this TableBordersDetails.


        :param b_lto_tr: The b_lto_tr of this TableBordersDetails.  # noqa: E501
        :type: object
        """

        self._b_lto_tr = b_lto_tr

    @property
    def id(self):
        """Gets the id of this TableBordersDetails.  # noqa: E501


        :return: The id of this TableBordersDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TableBordersDetails.


        :param id: The id of this TableBordersDetails.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def date_created(self):
        """Gets the date_created of this TableBordersDetails.  # noqa: E501


        :return: The date_created of this TableBordersDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this TableBordersDetails.


        :param date_created: The date_created of this TableBordersDetails.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def user_created(self):
        """Gets the user_created of this TableBordersDetails.  # noqa: E501


        :return: The user_created of this TableBordersDetails.  # noqa: E501
        :rtype: str
        """
        return self._user_created

    @user_created.setter
    def user_created(self, user_created):
        """Sets the user_created of this TableBordersDetails.


        :param user_created: The user_created of this TableBordersDetails.  # noqa: E501
        :type: str
        """

        self._user_created = user_created

    @property
    def date_modified(self):
        """Gets the date_modified of this TableBordersDetails.  # noqa: E501


        :return: The date_modified of this TableBordersDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this TableBordersDetails.


        :param date_modified: The date_modified of this TableBordersDetails.  # noqa: E501
        :type: datetime
        """

        self._date_modified = date_modified

    @property
    def user_modified(self):
        """Gets the user_modified of this TableBordersDetails.  # noqa: E501


        :return: The user_modified of this TableBordersDetails.  # noqa: E501
        :rtype: str
        """
        return self._user_modified

    @user_modified.setter
    def user_modified(self, user_modified):
        """Sets the user_modified of this TableBordersDetails.


        :param user_modified: The user_modified of this TableBordersDetails.  # noqa: E501
        :type: str
        """

        self._user_modified = user_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableBordersDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TableBordersDetails):
            return True

        return self.to_dict() != other.to_dict()
