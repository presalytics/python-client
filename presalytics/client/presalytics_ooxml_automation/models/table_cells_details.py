# coding: utf-8

"""
    OOXML Automation

    This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.  # noqa: E501

    The version of the OpenAPI document: 0.1.0-no-tags
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from presalytics.client.presalytics_ooxml_automation.configuration import Configuration


class TableCellsDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'row_id': 'str',
        'row': 'object',
        'column_id': 'str',
        'column': 'object',
        'row_span': 'int',
        'column_span': 'int',
        'is_merged_vertical': 'bool',
        'is_merged_horozontal': 'bool',
        'fill_map': 'object',
        'text_container': 'object',
        'border': 'object',
        'id': 'str',
        'date_created': 'datetime',
        'user_created': 'str',
        'date_modified': 'datetime',
        'user_modified': 'str'
    }

    attribute_map = {
        'row_id': 'rowId',
        'row': 'row',
        'column_id': 'columnId',
        'column': 'column',
        'row_span': 'rowSpan',
        'column_span': 'columnSpan',
        'is_merged_vertical': 'isMergedVertical',
        'is_merged_horozontal': 'isMergedHorozontal',
        'fill_map': 'fillMap',
        'text_container': 'textContainer',
        'border': 'border',
        'id': 'id',
        'date_created': 'dateCreated',
        'user_created': 'userCreated',
        'date_modified': 'dateModified',
        'user_modified': 'userModified'
    }

    def __init__(self, row_id=None, row=None, column_id=None, column=None, row_span=None, column_span=None, is_merged_vertical=None, is_merged_horozontal=None, fill_map=None, text_container=None, border=None, id=None, date_created=None, user_created=None, date_modified=None, user_modified=None, local_vars_configuration=None):  # noqa: E501
        """TableCellsDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._row_id = None
        self._row = None
        self._column_id = None
        self._column = None
        self._row_span = None
        self._column_span = None
        self._is_merged_vertical = None
        self._is_merged_horozontal = None
        self._fill_map = None
        self._text_container = None
        self._border = None
        self._id = None
        self._date_created = None
        self._user_created = None
        self._date_modified = None
        self._user_modified = None
        self.discriminator = None

        self.row_id = row_id
        if row is not None:
            self.row = row
        self.column_id = column_id
        if column is not None:
            self.column = column
        if row_span is not None:
            self.row_span = row_span
        if column_span is not None:
            self.column_span = column_span
        if is_merged_vertical is not None:
            self.is_merged_vertical = is_merged_vertical
        if is_merged_horozontal is not None:
            self.is_merged_horozontal = is_merged_horozontal
        if fill_map is not None:
            self.fill_map = fill_map
        if text_container is not None:
            self.text_container = text_container
        if border is not None:
            self.border = border
        if id is not None:
            self.id = id
        if date_created is not None:
            self.date_created = date_created
        if user_created is not None:
            self.user_created = user_created
        if date_modified is not None:
            self.date_modified = date_modified
        if user_modified is not None:
            self.user_modified = user_modified

    @property
    def row_id(self):
        """Gets the row_id of this TableCellsDetails.  # noqa: E501


        :return: The row_id of this TableCellsDetails.  # noqa: E501
        :rtype: str
        """
        return self._row_id

    @row_id.setter
    def row_id(self, row_id):
        """Sets the row_id of this TableCellsDetails.


        :param row_id: The row_id of this TableCellsDetails.  # noqa: E501
        :type: str
        """

        self._row_id = row_id

    @property
    def row(self):
        """Gets the row of this TableCellsDetails.  # noqa: E501


        :return: The row of this TableCellsDetails.  # noqa: E501
        :rtype: object
        """
        return self._row

    @row.setter
    def row(self, row):
        """Sets the row of this TableCellsDetails.


        :param row: The row of this TableCellsDetails.  # noqa: E501
        :type: object
        """

        self._row = row

    @property
    def column_id(self):
        """Gets the column_id of this TableCellsDetails.  # noqa: E501


        :return: The column_id of this TableCellsDetails.  # noqa: E501
        :rtype: str
        """
        return self._column_id

    @column_id.setter
    def column_id(self, column_id):
        """Sets the column_id of this TableCellsDetails.


        :param column_id: The column_id of this TableCellsDetails.  # noqa: E501
        :type: str
        """

        self._column_id = column_id

    @property
    def column(self):
        """Gets the column of this TableCellsDetails.  # noqa: E501


        :return: The column of this TableCellsDetails.  # noqa: E501
        :rtype: object
        """
        return self._column

    @column.setter
    def column(self, column):
        """Sets the column of this TableCellsDetails.


        :param column: The column of this TableCellsDetails.  # noqa: E501
        :type: object
        """

        self._column = column

    @property
    def row_span(self):
        """Gets the row_span of this TableCellsDetails.  # noqa: E501


        :return: The row_span of this TableCellsDetails.  # noqa: E501
        :rtype: int
        """
        return self._row_span

    @row_span.setter
    def row_span(self, row_span):
        """Sets the row_span of this TableCellsDetails.


        :param row_span: The row_span of this TableCellsDetails.  # noqa: E501
        :type: int
        """

        self._row_span = row_span

    @property
    def column_span(self):
        """Gets the column_span of this TableCellsDetails.  # noqa: E501


        :return: The column_span of this TableCellsDetails.  # noqa: E501
        :rtype: int
        """
        return self._column_span

    @column_span.setter
    def column_span(self, column_span):
        """Sets the column_span of this TableCellsDetails.


        :param column_span: The column_span of this TableCellsDetails.  # noqa: E501
        :type: int
        """

        self._column_span = column_span

    @property
    def is_merged_vertical(self):
        """Gets the is_merged_vertical of this TableCellsDetails.  # noqa: E501


        :return: The is_merged_vertical of this TableCellsDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_merged_vertical

    @is_merged_vertical.setter
    def is_merged_vertical(self, is_merged_vertical):
        """Sets the is_merged_vertical of this TableCellsDetails.


        :param is_merged_vertical: The is_merged_vertical of this TableCellsDetails.  # noqa: E501
        :type: bool
        """

        self._is_merged_vertical = is_merged_vertical

    @property
    def is_merged_horozontal(self):
        """Gets the is_merged_horozontal of this TableCellsDetails.  # noqa: E501


        :return: The is_merged_horozontal of this TableCellsDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_merged_horozontal

    @is_merged_horozontal.setter
    def is_merged_horozontal(self, is_merged_horozontal):
        """Sets the is_merged_horozontal of this TableCellsDetails.


        :param is_merged_horozontal: The is_merged_horozontal of this TableCellsDetails.  # noqa: E501
        :type: bool
        """

        self._is_merged_horozontal = is_merged_horozontal

    @property
    def fill_map(self):
        """Gets the fill_map of this TableCellsDetails.  # noqa: E501


        :return: The fill_map of this TableCellsDetails.  # noqa: E501
        :rtype: object
        """
        return self._fill_map

    @fill_map.setter
    def fill_map(self, fill_map):
        """Sets the fill_map of this TableCellsDetails.


        :param fill_map: The fill_map of this TableCellsDetails.  # noqa: E501
        :type: object
        """

        self._fill_map = fill_map

    @property
    def text_container(self):
        """Gets the text_container of this TableCellsDetails.  # noqa: E501


        :return: The text_container of this TableCellsDetails.  # noqa: E501
        :rtype: object
        """
        return self._text_container

    @text_container.setter
    def text_container(self, text_container):
        """Sets the text_container of this TableCellsDetails.


        :param text_container: The text_container of this TableCellsDetails.  # noqa: E501
        :type: object
        """

        self._text_container = text_container

    @property
    def border(self):
        """Gets the border of this TableCellsDetails.  # noqa: E501


        :return: The border of this TableCellsDetails.  # noqa: E501
        :rtype: object
        """
        return self._border

    @border.setter
    def border(self, border):
        """Sets the border of this TableCellsDetails.


        :param border: The border of this TableCellsDetails.  # noqa: E501
        :type: object
        """

        self._border = border

    @property
    def id(self):
        """Gets the id of this TableCellsDetails.  # noqa: E501


        :return: The id of this TableCellsDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TableCellsDetails.


        :param id: The id of this TableCellsDetails.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def date_created(self):
        """Gets the date_created of this TableCellsDetails.  # noqa: E501


        :return: The date_created of this TableCellsDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this TableCellsDetails.


        :param date_created: The date_created of this TableCellsDetails.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def user_created(self):
        """Gets the user_created of this TableCellsDetails.  # noqa: E501


        :return: The user_created of this TableCellsDetails.  # noqa: E501
        :rtype: str
        """
        return self._user_created

    @user_created.setter
    def user_created(self, user_created):
        """Sets the user_created of this TableCellsDetails.


        :param user_created: The user_created of this TableCellsDetails.  # noqa: E501
        :type: str
        """

        self._user_created = user_created

    @property
    def date_modified(self):
        """Gets the date_modified of this TableCellsDetails.  # noqa: E501


        :return: The date_modified of this TableCellsDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this TableCellsDetails.


        :param date_modified: The date_modified of this TableCellsDetails.  # noqa: E501
        :type: datetime
        """

        self._date_modified = date_modified

    @property
    def user_modified(self):
        """Gets the user_modified of this TableCellsDetails.  # noqa: E501


        :return: The user_modified of this TableCellsDetails.  # noqa: E501
        :rtype: str
        """
        return self._user_modified

    @user_modified.setter
    def user_modified(self, user_modified):
        """Sets the user_modified of this TableCellsDetails.


        :param user_modified: The user_modified of this TableCellsDetails.  # noqa: E501
        :type: str
        """

        self._user_modified = user_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableCellsDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TableCellsDetails):
            return True

        return self.to_dict() != other.to_dict()
