# coding: utf-8

"""
    OOXML Automation

    This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.  # noqa: E501

    The version of the OpenAPI document: 0.1.0-no-tags
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from presalytics.client.presalytics_ooxml_automation.configuration import Configuration


class ThemeThemesDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'slide_id': 'str',
        'slide': 'object',
        'background_fills': 'object',
        'colors': 'object',
        'custom_colors': 'object',
        'effect_maps': 'object',
        'fills': 'object',
        'fonts': 'object',
        'line_maps': 'object',
        'base_element_blob_url': 'str',
        'changed_base_element_blob_url': 'str',
        'package_uri': 'str',
        'name': 'str',
        'id': 'str',
        'date_created': 'datetime',
        'user_created': 'str',
        'date_modified': 'datetime',
        'user_modified': 'str'
    }

    attribute_map = {
        'slide_id': 'slideId',
        'slide': 'slide',
        'background_fills': 'backgroundFills',
        'colors': 'colors',
        'custom_colors': 'customColors',
        'effect_maps': 'effectMaps',
        'fills': 'fills',
        'fonts': 'fonts',
        'line_maps': 'lineMaps',
        'base_element_blob_url': 'baseElementBlobUrl',
        'changed_base_element_blob_url': 'changedBaseElementBlobUrl',
        'package_uri': 'packageUri',
        'name': 'name',
        'id': 'id',
        'date_created': 'dateCreated',
        'user_created': 'userCreated',
        'date_modified': 'dateModified',
        'user_modified': 'userModified'
    }

    def __init__(self, slide_id=None, slide=None, background_fills=None, colors=None, custom_colors=None, effect_maps=None, fills=None, fonts=None, line_maps=None, base_element_blob_url=None, changed_base_element_blob_url=None, package_uri=None, name=None, id=None, date_created=None, user_created=None, date_modified=None, user_modified=None, local_vars_configuration=None):  # noqa: E501
        """ThemeThemesDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._slide_id = None
        self._slide = None
        self._background_fills = None
        self._colors = None
        self._custom_colors = None
        self._effect_maps = None
        self._fills = None
        self._fonts = None
        self._line_maps = None
        self._base_element_blob_url = None
        self._changed_base_element_blob_url = None
        self._package_uri = None
        self._name = None
        self._id = None
        self._date_created = None
        self._user_created = None
        self._date_modified = None
        self._user_modified = None
        self.discriminator = None

        self.slide_id = slide_id
        if slide is not None:
            self.slide = slide
        self.background_fills = background_fills
        if colors is not None:
            self.colors = colors
        self.custom_colors = custom_colors
        self.effect_maps = effect_maps
        self.fills = fills
        if fonts is not None:
            self.fonts = fonts
        self.line_maps = line_maps
        self.base_element_blob_url = base_element_blob_url
        self.changed_base_element_blob_url = changed_base_element_blob_url
        self.package_uri = package_uri
        self.name = name
        if id is not None:
            self.id = id
        if date_created is not None:
            self.date_created = date_created
        if user_created is not None:
            self.user_created = user_created
        if date_modified is not None:
            self.date_modified = date_modified
        if user_modified is not None:
            self.user_modified = user_modified

    @property
    def slide_id(self):
        """Gets the slide_id of this ThemeThemesDetails.  # noqa: E501


        :return: The slide_id of this ThemeThemesDetails.  # noqa: E501
        :rtype: str
        """
        return self._slide_id

    @slide_id.setter
    def slide_id(self, slide_id):
        """Sets the slide_id of this ThemeThemesDetails.


        :param slide_id: The slide_id of this ThemeThemesDetails.  # noqa: E501
        :type: str
        """

        self._slide_id = slide_id

    @property
    def slide(self):
        """Gets the slide of this ThemeThemesDetails.  # noqa: E501


        :return: The slide of this ThemeThemesDetails.  # noqa: E501
        :rtype: object
        """
        return self._slide

    @slide.setter
    def slide(self, slide):
        """Sets the slide of this ThemeThemesDetails.


        :param slide: The slide of this ThemeThemesDetails.  # noqa: E501
        :type: object
        """

        self._slide = slide

    @property
    def background_fills(self):
        """Gets the background_fills of this ThemeThemesDetails.  # noqa: E501


        :return: The background_fills of this ThemeThemesDetails.  # noqa: E501
        :rtype: object
        """
        return self._background_fills

    @background_fills.setter
    def background_fills(self, background_fills):
        """Sets the background_fills of this ThemeThemesDetails.


        :param background_fills: The background_fills of this ThemeThemesDetails.  # noqa: E501
        :type: object
        """

        self._background_fills = background_fills

    @property
    def colors(self):
        """Gets the colors of this ThemeThemesDetails.  # noqa: E501


        :return: The colors of this ThemeThemesDetails.  # noqa: E501
        :rtype: object
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this ThemeThemesDetails.


        :param colors: The colors of this ThemeThemesDetails.  # noqa: E501
        :type: object
        """

        self._colors = colors

    @property
    def custom_colors(self):
        """Gets the custom_colors of this ThemeThemesDetails.  # noqa: E501


        :return: The custom_colors of this ThemeThemesDetails.  # noqa: E501
        :rtype: object
        """
        return self._custom_colors

    @custom_colors.setter
    def custom_colors(self, custom_colors):
        """Sets the custom_colors of this ThemeThemesDetails.


        :param custom_colors: The custom_colors of this ThemeThemesDetails.  # noqa: E501
        :type: object
        """

        self._custom_colors = custom_colors

    @property
    def effect_maps(self):
        """Gets the effect_maps of this ThemeThemesDetails.  # noqa: E501


        :return: The effect_maps of this ThemeThemesDetails.  # noqa: E501
        :rtype: object
        """
        return self._effect_maps

    @effect_maps.setter
    def effect_maps(self, effect_maps):
        """Sets the effect_maps of this ThemeThemesDetails.


        :param effect_maps: The effect_maps of this ThemeThemesDetails.  # noqa: E501
        :type: object
        """

        self._effect_maps = effect_maps

    @property
    def fills(self):
        """Gets the fills of this ThemeThemesDetails.  # noqa: E501


        :return: The fills of this ThemeThemesDetails.  # noqa: E501
        :rtype: object
        """
        return self._fills

    @fills.setter
    def fills(self, fills):
        """Sets the fills of this ThemeThemesDetails.


        :param fills: The fills of this ThemeThemesDetails.  # noqa: E501
        :type: object
        """

        self._fills = fills

    @property
    def fonts(self):
        """Gets the fonts of this ThemeThemesDetails.  # noqa: E501


        :return: The fonts of this ThemeThemesDetails.  # noqa: E501
        :rtype: object
        """
        return self._fonts

    @fonts.setter
    def fonts(self, fonts):
        """Sets the fonts of this ThemeThemesDetails.


        :param fonts: The fonts of this ThemeThemesDetails.  # noqa: E501
        :type: object
        """

        self._fonts = fonts

    @property
    def line_maps(self):
        """Gets the line_maps of this ThemeThemesDetails.  # noqa: E501


        :return: The line_maps of this ThemeThemesDetails.  # noqa: E501
        :rtype: object
        """
        return self._line_maps

    @line_maps.setter
    def line_maps(self, line_maps):
        """Sets the line_maps of this ThemeThemesDetails.


        :param line_maps: The line_maps of this ThemeThemesDetails.  # noqa: E501
        :type: object
        """

        self._line_maps = line_maps

    @property
    def base_element_blob_url(self):
        """Gets the base_element_blob_url of this ThemeThemesDetails.  # noqa: E501


        :return: The base_element_blob_url of this ThemeThemesDetails.  # noqa: E501
        :rtype: str
        """
        return self._base_element_blob_url

    @base_element_blob_url.setter
    def base_element_blob_url(self, base_element_blob_url):
        """Sets the base_element_blob_url of this ThemeThemesDetails.


        :param base_element_blob_url: The base_element_blob_url of this ThemeThemesDetails.  # noqa: E501
        :type: str
        """

        self._base_element_blob_url = base_element_blob_url

    @property
    def changed_base_element_blob_url(self):
        """Gets the changed_base_element_blob_url of this ThemeThemesDetails.  # noqa: E501


        :return: The changed_base_element_blob_url of this ThemeThemesDetails.  # noqa: E501
        :rtype: str
        """
        return self._changed_base_element_blob_url

    @changed_base_element_blob_url.setter
    def changed_base_element_blob_url(self, changed_base_element_blob_url):
        """Sets the changed_base_element_blob_url of this ThemeThemesDetails.


        :param changed_base_element_blob_url: The changed_base_element_blob_url of this ThemeThemesDetails.  # noqa: E501
        :type: str
        """

        self._changed_base_element_blob_url = changed_base_element_blob_url

    @property
    def package_uri(self):
        """Gets the package_uri of this ThemeThemesDetails.  # noqa: E501


        :return: The package_uri of this ThemeThemesDetails.  # noqa: E501
        :rtype: str
        """
        return self._package_uri

    @package_uri.setter
    def package_uri(self, package_uri):
        """Sets the package_uri of this ThemeThemesDetails.


        :param package_uri: The package_uri of this ThemeThemesDetails.  # noqa: E501
        :type: str
        """

        self._package_uri = package_uri

    @property
    def name(self):
        """Gets the name of this ThemeThemesDetails.  # noqa: E501


        :return: The name of this ThemeThemesDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ThemeThemesDetails.


        :param name: The name of this ThemeThemesDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this ThemeThemesDetails.  # noqa: E501


        :return: The id of this ThemeThemesDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ThemeThemesDetails.


        :param id: The id of this ThemeThemesDetails.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def date_created(self):
        """Gets the date_created of this ThemeThemesDetails.  # noqa: E501


        :return: The date_created of this ThemeThemesDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ThemeThemesDetails.


        :param date_created: The date_created of this ThemeThemesDetails.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def user_created(self):
        """Gets the user_created of this ThemeThemesDetails.  # noqa: E501


        :return: The user_created of this ThemeThemesDetails.  # noqa: E501
        :rtype: str
        """
        return self._user_created

    @user_created.setter
    def user_created(self, user_created):
        """Sets the user_created of this ThemeThemesDetails.


        :param user_created: The user_created of this ThemeThemesDetails.  # noqa: E501
        :type: str
        """

        self._user_created = user_created

    @property
    def date_modified(self):
        """Gets the date_modified of this ThemeThemesDetails.  # noqa: E501


        :return: The date_modified of this ThemeThemesDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this ThemeThemesDetails.


        :param date_modified: The date_modified of this ThemeThemesDetails.  # noqa: E501
        :type: datetime
        """

        self._date_modified = date_modified

    @property
    def user_modified(self):
        """Gets the user_modified of this ThemeThemesDetails.  # noqa: E501


        :return: The user_modified of this ThemeThemesDetails.  # noqa: E501
        :rtype: str
        """
        return self._user_modified

    @user_modified.setter
    def user_modified(self, user_modified):
        """Sets the user_modified of this ThemeThemesDetails.


        :param user_modified: The user_modified of this ThemeThemesDetails.  # noqa: E501
        :type: str
        """

        self._user_modified = user_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThemeThemesDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ThemeThemesDetails):
            return True

        return self.to_dict() != other.to_dict()
