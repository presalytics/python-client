# coding: utf-8

"""
    Story

    This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API  # noqa: E501

    The version of the OpenAPI document: 0.3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CachePostRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'current_user_id': 'str',
        'nonce': 'str',
        'subdocument': 'str'
    }

    attribute_map = {
        'current_user_id': 'current_user_id',
        'nonce': 'nonce',
        'subdocument': 'subdocument'
    }

    def __init__(self, current_user_id=None, nonce=None, subdocument=None):  # noqa: E501
        """CachePostRequest - a model defined in OpenAPI"""  # noqa: E501

        self._current_user_id = None
        self._nonce = None
        self._subdocument = None
        self.discriminator = None

        if current_user_id is not None:
            self.current_user_id = current_user_id
        if nonce is not None:
            self.nonce = nonce
        if subdocument is not None:
            self.subdocument = subdocument

    @property
    def current_user_id(self):
        """Gets the current_user_id of this CachePostRequest.  # noqa: E501


        :return: The current_user_id of this CachePostRequest.  # noqa: E501
        :rtype: str
        """
        return self._current_user_id

    @current_user_id.setter
    def current_user_id(self, current_user_id):
        """Sets the current_user_id of this CachePostRequest.


        :param current_user_id: The current_user_id of this CachePostRequest.  # noqa: E501
        :type: str
        """

        self._current_user_id = current_user_id

    @property
    def nonce(self):
        """Gets the nonce of this CachePostRequest.  # noqa: E501


        :return: The nonce of this CachePostRequest.  # noqa: E501
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this CachePostRequest.


        :param nonce: The nonce of this CachePostRequest.  # noqa: E501
        :type: str
        """

        self._nonce = nonce

    @property
    def subdocument(self):
        """Gets the subdocument of this CachePostRequest.  # noqa: E501


        :return: The subdocument of this CachePostRequest.  # noqa: E501
        :rtype: str
        """
        return self._subdocument

    @subdocument.setter
    def subdocument(self, subdocument):
        """Sets the subdocument of this CachePostRequest.


        :param subdocument: The subdocument of this CachePostRequest.  # noqa: E501
        :type: str
        """

        self._subdocument = subdocument

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CachePostRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
