# coding: utf-8

"""
    Story

    This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API  # noqa: E501

    The version of the OpenAPI document: 0.3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EventAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'attributes': 'str',
        'chat_prompt': 'str',
        'conversation_id': 'str',
        'dom_selectors': 'str',
        'is_chat_hidden': 'bool',
        'is_notify_enabled': 'bool',
        'name': 'str'
    }

    attribute_map = {
        'attributes': 'attributes',
        'chat_prompt': 'chat_prompt',
        'conversation_id': 'conversation_id',
        'dom_selectors': 'dom_selectors',
        'is_chat_hidden': 'is_chat_hidden',
        'is_notify_enabled': 'is_notify_enabled',
        'name': 'name'
    }

    def __init__(self, attributes=None, chat_prompt=None, conversation_id=None, dom_selectors=None, is_chat_hidden=None, is_notify_enabled=None, name=None):  # noqa: E501
        """EventAllOf - a model defined in OpenAPI"""  # noqa: E501

        self._attributes = None
        self._chat_prompt = None
        self._conversation_id = None
        self._dom_selectors = None
        self._is_chat_hidden = None
        self._is_notify_enabled = None
        self._name = None
        self.discriminator = None

        if attributes is not None:
            self.attributes = attributes
        if chat_prompt is not None:
            self.chat_prompt = chat_prompt
        if conversation_id is not None:
            self.conversation_id = conversation_id
        if dom_selectors is not None:
            self.dom_selectors = dom_selectors
        if is_chat_hidden is not None:
            self.is_chat_hidden = is_chat_hidden
        if is_notify_enabled is not None:
            self.is_notify_enabled = is_notify_enabled
        if name is not None:
            self.name = name

    @property
    def attributes(self):
        """Gets the attributes of this EventAllOf.  # noqa: E501


        :return: The attributes of this EventAllOf.  # noqa: E501
        :rtype: str
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this EventAllOf.


        :param attributes: The attributes of this EventAllOf.  # noqa: E501
        :type: str
        """

        self._attributes = attributes

    @property
    def chat_prompt(self):
        """Gets the chat_prompt of this EventAllOf.  # noqa: E501


        :return: The chat_prompt of this EventAllOf.  # noqa: E501
        :rtype: str
        """
        return self._chat_prompt

    @chat_prompt.setter
    def chat_prompt(self, chat_prompt):
        """Sets the chat_prompt of this EventAllOf.


        :param chat_prompt: The chat_prompt of this EventAllOf.  # noqa: E501
        :type: str
        """

        self._chat_prompt = chat_prompt

    @property
    def conversation_id(self):
        """Gets the conversation_id of this EventAllOf.  # noqa: E501


        :return: The conversation_id of this EventAllOf.  # noqa: E501
        :rtype: str
        """
        return self._conversation_id

    @conversation_id.setter
    def conversation_id(self, conversation_id):
        """Sets the conversation_id of this EventAllOf.


        :param conversation_id: The conversation_id of this EventAllOf.  # noqa: E501
        :type: str
        """

        self._conversation_id = conversation_id

    @property
    def dom_selectors(self):
        """Gets the dom_selectors of this EventAllOf.  # noqa: E501


        :return: The dom_selectors of this EventAllOf.  # noqa: E501
        :rtype: str
        """
        return self._dom_selectors

    @dom_selectors.setter
    def dom_selectors(self, dom_selectors):
        """Sets the dom_selectors of this EventAllOf.


        :param dom_selectors: The dom_selectors of this EventAllOf.  # noqa: E501
        :type: str
        """

        self._dom_selectors = dom_selectors

    @property
    def is_chat_hidden(self):
        """Gets the is_chat_hidden of this EventAllOf.  # noqa: E501


        :return: The is_chat_hidden of this EventAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._is_chat_hidden

    @is_chat_hidden.setter
    def is_chat_hidden(self, is_chat_hidden):
        """Sets the is_chat_hidden of this EventAllOf.


        :param is_chat_hidden: The is_chat_hidden of this EventAllOf.  # noqa: E501
        :type: bool
        """

        self._is_chat_hidden = is_chat_hidden

    @property
    def is_notify_enabled(self):
        """Gets the is_notify_enabled of this EventAllOf.  # noqa: E501


        :return: The is_notify_enabled of this EventAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._is_notify_enabled

    @is_notify_enabled.setter
    def is_notify_enabled(self, is_notify_enabled):
        """Sets the is_notify_enabled of this EventAllOf.


        :param is_notify_enabled: The is_notify_enabled of this EventAllOf.  # noqa: E501
        :type: bool
        """

        self._is_notify_enabled = is_notify_enabled

    @property
    def name(self):
        """Gets the name of this EventAllOf.  # noqa: E501


        :return: The name of this EventAllOf.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventAllOf.


        :param name: The name of this EventAllOf.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventAllOf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
