# coding: utf-8

"""
    Story

    This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API  # noqa: E501

    The version of the OpenAPI document: 0.3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class FileUpload(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'content_length': 'int',
        'file': 'str',
        'file_name': 'str',
        'mimetype': 'str'
    }

    attribute_map = {
        'content_length': 'content_length',
        'file': 'file',
        'file_name': 'file_name',
        'mimetype': 'mimetype'
    }

    def __init__(self, content_length=None, file=None, file_name=None, mimetype=None):  # noqa: E501
        """FileUpload - a model defined in OpenAPI"""  # noqa: E501

        self._content_length = None
        self._file = None
        self._file_name = None
        self._mimetype = None
        self.discriminator = None

        if content_length is not None:
            self.content_length = content_length
        if file is not None:
            self.file = file
        if file_name is not None:
            self.file_name = file_name
        if mimetype is not None:
            self.mimetype = mimetype

    @property
    def content_length(self):
        """Gets the content_length of this FileUpload.  # noqa: E501


        :return: The content_length of this FileUpload.  # noqa: E501
        :rtype: int
        """
        return self._content_length

    @content_length.setter
    def content_length(self, content_length):
        """Sets the content_length of this FileUpload.


        :param content_length: The content_length of this FileUpload.  # noqa: E501
        :type: int
        """

        self._content_length = content_length

    @property
    def file(self):
        """Gets the file of this FileUpload.  # noqa: E501


        :return: The file of this FileUpload.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this FileUpload.


        :param file: The file of this FileUpload.  # noqa: E501
        :type: str
        """

        self._file = file

    @property
    def file_name(self):
        """Gets the file_name of this FileUpload.  # noqa: E501


        :return: The file_name of this FileUpload.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this FileUpload.


        :param file_name: The file_name of this FileUpload.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def mimetype(self):
        """Gets the mimetype of this FileUpload.  # noqa: E501


        :return: The mimetype of this FileUpload.  # noqa: E501
        :rtype: str
        """
        return self._mimetype

    @mimetype.setter
    def mimetype(self, mimetype):
        """Sets the mimetype of this FileUpload.


        :param mimetype: The mimetype of this FileUpload.  # noqa: E501
        :type: str
        """

        self._mimetype = mimetype

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileUpload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
