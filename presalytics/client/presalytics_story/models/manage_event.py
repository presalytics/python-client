# coding: utf-8

"""
    Story

    This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API  # noqa: E501

    The version of the OpenAPI document: 0.3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ManageEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'action': 'str',
        'action_params': 'dict(str, str)',
        'name': 'str'
    }

    attribute_map = {
        'action': 'action',
        'action_params': 'action_params',
        'name': 'name'
    }

    def __init__(self, action=None, action_params=None, name=None):  # noqa: E501
        """ManageEvent - a model defined in OpenAPI"""  # noqa: E501

        self._action = None
        self._action_params = None
        self._name = None
        self.discriminator = None

        if action is not None:
            self.action = action
        if action_params is not None:
            self.action_params = action_params
        self.name = name

    @property
    def action(self):
        """Gets the action of this ManageEvent.  # noqa: E501


        :return: The action of this ManageEvent.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ManageEvent.


        :param action: The action of this ManageEvent.  # noqa: E501
        :type: str
        """
        allowed_values = ["create", "fire", "change"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def action_params(self):
        """Gets the action_params of this ManageEvent.  # noqa: E501


        :return: The action_params of this ManageEvent.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._action_params

    @action_params.setter
    def action_params(self, action_params):
        """Sets the action_params of this ManageEvent.


        :param action_params: The action_params of this ManageEvent.  # noqa: E501
        :type: dict(str, str)
        """

        self._action_params = action_params

    @property
    def name(self):
        """Gets the name of this ManageEvent.  # noqa: E501


        :return: The name of this ManageEvent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ManageEvent.


        :param name: The name of this ManageEvent.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManageEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
