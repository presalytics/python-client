# coding: utf-8

"""
    Story

    This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API  # noqa: E501

    The version of the OpenAPI document: 0.3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Message(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'body': 'str',
        'id': 'str',
        'remote': 'bool',
        'timestamp': 'datetime',
        'user_id': 'str',
        'user_name': 'str'
    }

    attribute_map = {
        'body': 'body',
        'id': 'id',
        'remote': 'remote',
        'timestamp': 'timestamp',
        'user_id': 'userId',
        'user_name': 'userName'
    }

    def __init__(self, body=None, id=None, remote=None, timestamp=None, user_id=None, user_name=None):  # noqa: E501
        """Message - a model defined in OpenAPI"""  # noqa: E501

        self._body = None
        self._id = None
        self._remote = None
        self._timestamp = None
        self._user_id = None
        self._user_name = None
        self.discriminator = None

        if body is not None:
            self.body = body
        if id is not None:
            self.id = id
        if remote is not None:
            self.remote = remote
        if timestamp is not None:
            self.timestamp = timestamp
        if user_id is not None:
            self.user_id = user_id
        if user_name is not None:
            self.user_name = user_name

    @property
    def body(self):
        """Gets the body of this Message.  # noqa: E501


        :return: The body of this Message.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Message.


        :param body: The body of this Message.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def id(self):
        """Gets the id of this Message.  # noqa: E501


        :return: The id of this Message.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Message.


        :param id: The id of this Message.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def remote(self):
        """Gets the remote of this Message.  # noqa: E501


        :return: The remote of this Message.  # noqa: E501
        :rtype: bool
        """
        return self._remote

    @remote.setter
    def remote(self, remote):
        """Sets the remote of this Message.


        :param remote: The remote of this Message.  # noqa: E501
        :type: bool
        """

        self._remote = remote

    @property
    def timestamp(self):
        """Gets the timestamp of this Message.  # noqa: E501


        :return: The timestamp of this Message.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Message.


        :param timestamp: The timestamp of this Message.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def user_id(self):
        """Gets the user_id of this Message.  # noqa: E501


        :return: The user_id of this Message.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Message.


        :param user_id: The user_id of this Message.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this Message.  # noqa: E501


        :return: The user_name of this Message.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this Message.


        :param user_name: The user_name of this Message.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Message):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
