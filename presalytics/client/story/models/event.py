# coding: utf-8

"""
    Story

    This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API  # noqa: E501

    The version of the OpenAPI document: 0.3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Event(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_at': 'datetime',
        'created_by': 'str',
        'id': 'str',
        'updated_at': 'datetime',
        'updated_by': 'str',
        'attributes': 'str',
        'chat_prompt': 'str',
        'conversation_id': 'str',
        'dom_selectors': 'str',
        'is_chat_hidden': 'bool',
        'is_notify_enabled': 'bool',
        'name': 'str'
    }

    attribute_map = {
        'created_at': 'created_at',
        'created_by': 'created_by',
        'id': 'id',
        'updated_at': 'updated_at',
        'updated_by': 'updated_by',
        'attributes': 'attributes',
        'chat_prompt': 'chat_prompt',
        'conversation_id': 'conversation_id',
        'dom_selectors': 'dom_selectors',
        'is_chat_hidden': 'is_chat_hidden',
        'is_notify_enabled': 'is_notify_enabled',
        'name': 'name'
    }

    def __init__(self, created_at=None, created_by=None, id=None, updated_at=None, updated_by=None, attributes=None, chat_prompt=None, conversation_id=None, dom_selectors=None, is_chat_hidden=None, is_notify_enabled=None, name=None):  # noqa: E501
        """Event - a model defined in OpenAPI"""  # noqa: E501

        self._created_at = None
        self._created_by = None
        self._id = None
        self._updated_at = None
        self._updated_by = None
        self._attributes = None
        self._chat_prompt = None
        self._conversation_id = None
        self._dom_selectors = None
        self._is_chat_hidden = None
        self._is_notify_enabled = None
        self._name = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if id is not None:
            self.id = id
        if updated_at is not None:
            self.updated_at = updated_at
        if updated_by is not None:
            self.updated_by = updated_by
        if attributes is not None:
            self.attributes = attributes
        if chat_prompt is not None:
            self.chat_prompt = chat_prompt
        if conversation_id is not None:
            self.conversation_id = conversation_id
        if dom_selectors is not None:
            self.dom_selectors = dom_selectors
        if is_chat_hidden is not None:
            self.is_chat_hidden = is_chat_hidden
        if is_notify_enabled is not None:
            self.is_notify_enabled = is_notify_enabled
        if name is not None:
            self.name = name

    @property
    def created_at(self):
        """Gets the created_at of this Event.  # noqa: E501


        :return: The created_at of this Event.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Event.


        :param created_at: The created_at of this Event.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Event.  # noqa: E501


        :return: The created_by of this Event.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Event.


        :param created_by: The created_by of this Event.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def id(self):
        """Gets the id of this Event.  # noqa: E501


        :return: The id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.


        :param id: The id of this Event.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def updated_at(self):
        """Gets the updated_at of this Event.  # noqa: E501


        :return: The updated_at of this Event.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Event.


        :param updated_at: The updated_at of this Event.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this Event.  # noqa: E501


        :return: The updated_by of this Event.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Event.


        :param updated_by: The updated_by of this Event.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def attributes(self):
        """Gets the attributes of this Event.  # noqa: E501


        :return: The attributes of this Event.  # noqa: E501
        :rtype: str
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Event.


        :param attributes: The attributes of this Event.  # noqa: E501
        :type: str
        """

        self._attributes = attributes

    @property
    def chat_prompt(self):
        """Gets the chat_prompt of this Event.  # noqa: E501


        :return: The chat_prompt of this Event.  # noqa: E501
        :rtype: str
        """
        return self._chat_prompt

    @chat_prompt.setter
    def chat_prompt(self, chat_prompt):
        """Sets the chat_prompt of this Event.


        :param chat_prompt: The chat_prompt of this Event.  # noqa: E501
        :type: str
        """

        self._chat_prompt = chat_prompt

    @property
    def conversation_id(self):
        """Gets the conversation_id of this Event.  # noqa: E501


        :return: The conversation_id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._conversation_id

    @conversation_id.setter
    def conversation_id(self, conversation_id):
        """Sets the conversation_id of this Event.


        :param conversation_id: The conversation_id of this Event.  # noqa: E501
        :type: str
        """

        self._conversation_id = conversation_id

    @property
    def dom_selectors(self):
        """Gets the dom_selectors of this Event.  # noqa: E501


        :return: The dom_selectors of this Event.  # noqa: E501
        :rtype: str
        """
        return self._dom_selectors

    @dom_selectors.setter
    def dom_selectors(self, dom_selectors):
        """Sets the dom_selectors of this Event.


        :param dom_selectors: The dom_selectors of this Event.  # noqa: E501
        :type: str
        """

        self._dom_selectors = dom_selectors

    @property
    def is_chat_hidden(self):
        """Gets the is_chat_hidden of this Event.  # noqa: E501


        :return: The is_chat_hidden of this Event.  # noqa: E501
        :rtype: bool
        """
        return self._is_chat_hidden

    @is_chat_hidden.setter
    def is_chat_hidden(self, is_chat_hidden):
        """Sets the is_chat_hidden of this Event.


        :param is_chat_hidden: The is_chat_hidden of this Event.  # noqa: E501
        :type: bool
        """

        self._is_chat_hidden = is_chat_hidden

    @property
    def is_notify_enabled(self):
        """Gets the is_notify_enabled of this Event.  # noqa: E501


        :return: The is_notify_enabled of this Event.  # noqa: E501
        :rtype: bool
        """
        return self._is_notify_enabled

    @is_notify_enabled.setter
    def is_notify_enabled(self, is_notify_enabled):
        """Sets the is_notify_enabled of this Event.


        :param is_notify_enabled: The is_notify_enabled of this Event.  # noqa: E501
        :type: bool
        """

        self._is_notify_enabled = is_notify_enabled

    @property
    def name(self):
        """Gets the name of this Event.  # noqa: E501


        :return: The name of this Event.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Event.


        :param name: The name of this Event.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
