# coding: utf-8

"""
    Story

    This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API  # noqa: E501

    The version of the OpenAPI document: 0.3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from presalytics.client.presalytics_story.configuration import Configuration


class OoxmlDocumentAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'story_id': 'str',
        'delete_target_on_story_delete': 'bool',
        'ooxml_automation_id': 'str'
    }

    attribute_map = {
        'story_id': 'story_id',
        'delete_target_on_story_delete': 'delete_target_on_story_delete',
        'ooxml_automation_id': 'ooxml_automation_id'
    }

    def __init__(self, story_id=None, delete_target_on_story_delete=None, ooxml_automation_id=None, local_vars_configuration=None):  # noqa: E501
        """OoxmlDocumentAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._story_id = None
        self._delete_target_on_story_delete = None
        self._ooxml_automation_id = None
        self.discriminator = None

        if story_id is not None:
            self.story_id = story_id
        if delete_target_on_story_delete is not None:
            self.delete_target_on_story_delete = delete_target_on_story_delete
        if ooxml_automation_id is not None:
            self.ooxml_automation_id = ooxml_automation_id

    @property
    def story_id(self):
        """Gets the story_id of this OoxmlDocumentAllOf.  # noqa: E501


        :return: The story_id of this OoxmlDocumentAllOf.  # noqa: E501
        :rtype: str
        """
        return self._story_id

    @story_id.setter
    def story_id(self, story_id):
        """Sets the story_id of this OoxmlDocumentAllOf.


        :param story_id: The story_id of this OoxmlDocumentAllOf.  # noqa: E501
        :type: str
        """

        self._story_id = story_id

    @property
    def delete_target_on_story_delete(self):
        """Gets the delete_target_on_story_delete of this OoxmlDocumentAllOf.  # noqa: E501


        :return: The delete_target_on_story_delete of this OoxmlDocumentAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._delete_target_on_story_delete

    @delete_target_on_story_delete.setter
    def delete_target_on_story_delete(self, delete_target_on_story_delete):
        """Sets the delete_target_on_story_delete of this OoxmlDocumentAllOf.


        :param delete_target_on_story_delete: The delete_target_on_story_delete of this OoxmlDocumentAllOf.  # noqa: E501
        :type: bool
        """

        self._delete_target_on_story_delete = delete_target_on_story_delete

    @property
    def ooxml_automation_id(self):
        """Gets the ooxml_automation_id of this OoxmlDocumentAllOf.  # noqa: E501


        :return: The ooxml_automation_id of this OoxmlDocumentAllOf.  # noqa: E501
        :rtype: str
        """
        return self._ooxml_automation_id

    @ooxml_automation_id.setter
    def ooxml_automation_id(self, ooxml_automation_id):
        """Sets the ooxml_automation_id of this OoxmlDocumentAllOf.


        :param ooxml_automation_id: The ooxml_automation_id of this OoxmlDocumentAllOf.  # noqa: E501
        :type: str
        """

        self._ooxml_automation_id = ooxml_automation_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OoxmlDocumentAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OoxmlDocumentAllOf):
            return True

        return self.to_dict() != other.to_dict()
