# coding: utf-8

"""
    Story

    This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API  # noqa: E501

    The version of the OpenAPI document: 0.3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from presalytics.client.presalytics_story.configuration import Configuration


class Story(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'created_at': 'datetime',
        'created_by': 'str',
        'updated_at': 'datetime',
        'updated_by': 'str',
        'title': 'str',
        'outline': 'str',
        'outline_history': 'list[StoryOutlineHistory]',
        'collaborators': 'list[StoryCollaborator]',
        'revision': 'int',
        'ooxml_documents': 'list[OoxmlDocument]',
        'is_public': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'created_by': 'created_by',
        'updated_at': 'updated_at',
        'updated_by': 'updated_by',
        'title': 'title',
        'outline': 'outline',
        'outline_history': 'outline_history',
        'collaborators': 'collaborators',
        'revision': 'revision',
        'ooxml_documents': 'ooxml_documents',
        'is_public': 'is_public'
    }

    def __init__(self, id=None, created_at=None, created_by=None, updated_at=None, updated_by=None, title=None, outline=None, outline_history=None, collaborators=None, revision=None, ooxml_documents=None, is_public=None, local_vars_configuration=None):  # noqa: E501
        """Story - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._created_at = None
        self._created_by = None
        self._updated_at = None
        self._updated_by = None
        self._title = None
        self._outline = None
        self._outline_history = None
        self._collaborators = None
        self._revision = None
        self._ooxml_documents = None
        self._is_public = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if updated_at is not None:
            self.updated_at = updated_at
        if updated_by is not None:
            self.updated_by = updated_by
        if title is not None:
            self.title = title
        if outline is not None:
            self.outline = outline
        if outline_history is not None:
            self.outline_history = outline_history
        if collaborators is not None:
            self.collaborators = collaborators
        if revision is not None:
            self.revision = revision
        if ooxml_documents is not None:
            self.ooxml_documents = ooxml_documents
        if is_public is not None:
            self.is_public = is_public

    @property
    def id(self):
        """Gets the id of this Story.  # noqa: E501


        :return: The id of this Story.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Story.


        :param id: The id of this Story.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this Story.  # noqa: E501


        :return: The created_at of this Story.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Story.


        :param created_at: The created_at of this Story.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Story.  # noqa: E501


        :return: The created_by of this Story.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Story.


        :param created_by: The created_by of this Story.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def updated_at(self):
        """Gets the updated_at of this Story.  # noqa: E501


        :return: The updated_at of this Story.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Story.


        :param updated_at: The updated_at of this Story.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this Story.  # noqa: E501


        :return: The updated_by of this Story.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Story.


        :param updated_by: The updated_by of this Story.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def title(self):
        """Gets the title of this Story.  # noqa: E501


        :return: The title of this Story.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Story.


        :param title: The title of this Story.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def outline(self):
        """Gets the outline of this Story.  # noqa: E501


        :return: The outline of this Story.  # noqa: E501
        :rtype: str
        """
        return self._outline

    @outline.setter
    def outline(self, outline):
        """Sets the outline of this Story.


        :param outline: The outline of this Story.  # noqa: E501
        :type: str
        """

        self._outline = outline

    @property
    def outline_history(self):
        """Gets the outline_history of this Story.  # noqa: E501


        :return: The outline_history of this Story.  # noqa: E501
        :rtype: list[StoryOutlineHistory]
        """
        return self._outline_history

    @outline_history.setter
    def outline_history(self, outline_history):
        """Sets the outline_history of this Story.


        :param outline_history: The outline_history of this Story.  # noqa: E501
        :type: list[StoryOutlineHistory]
        """

        self._outline_history = outline_history

    @property
    def collaborators(self):
        """Gets the collaborators of this Story.  # noqa: E501


        :return: The collaborators of this Story.  # noqa: E501
        :rtype: list[StoryCollaborator]
        """
        return self._collaborators

    @collaborators.setter
    def collaborators(self, collaborators):
        """Sets the collaborators of this Story.


        :param collaborators: The collaborators of this Story.  # noqa: E501
        :type: list[StoryCollaborator]
        """

        self._collaborators = collaborators

    @property
    def revision(self):
        """Gets the revision of this Story.  # noqa: E501


        :return: The revision of this Story.  # noqa: E501
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this Story.


        :param revision: The revision of this Story.  # noqa: E501
        :type: int
        """

        self._revision = revision

    @property
    def ooxml_documents(self):
        """Gets the ooxml_documents of this Story.  # noqa: E501


        :return: The ooxml_documents of this Story.  # noqa: E501
        :rtype: list[OoxmlDocument]
        """
        return self._ooxml_documents

    @ooxml_documents.setter
    def ooxml_documents(self, ooxml_documents):
        """Sets the ooxml_documents of this Story.


        :param ooxml_documents: The ooxml_documents of this Story.  # noqa: E501
        :type: list[OoxmlDocument]
        """

        self._ooxml_documents = ooxml_documents

    @property
    def is_public(self):
        """Gets the is_public of this Story.  # noqa: E501


        :return: The is_public of this Story.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this Story.


        :param is_public: The is_public of this Story.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Story):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Story):
            return True

        return self.to_dict() != other.to_dict()
